day65(vue)
웹개발4 12일차(vue 1일차)
프론트엔드 프레임워크 -> Vue.js -> Vue 개발도구 -> 설치 -> javascript 총 복습

1. 프론트엔드 프레임워크
				Angular			React			Vue.js
등장			2010			2013			2014
개발자		Google		Facebook	Google(Evan You)
라이선스		MIT		MIT		MIT
주요사항	일반DOM		가상DOM		가상DOM
				HTML 마크업	JSX권장		HTML 마크업
난이도			상				중					하

2. Vue.js란
	Evan you가 2013년 12월에 웹 어플리케이션 UI를 빠르게 개발하기 위해 만든
	자바스크립트 프레임워크
	웹 화면 작성에 최적화된 프레임워크
	사용자 인터페이스 개발을 위한 프로그레시브 프레임워크
	Vue.js는 SPA(Single Page Application) 개발을 위한 프론트엔드 프레임워크이다

+) SPA와 일반적인 웹페이지의 차이
														일반웹페이지																						SPA
	페이지 갱신 방식	사용자가 링크 클릭, 양식 제출 시 										페이지를 동적으로 로드하고 갱신할 때
									새로운 페이지를 로드하여 전체 페이지를 								Ajax or javascript를 사용하여
									새로고침한다																				내용만 업데이트 할 수 있다
									사용자 경험	페이지 로드마다 새로운 html을 받아와야		페이지 갱신이 부드럽고 빠르며
									하기 때문에 상대적으로 덜 부드럽고										어플리케이션처럼 느낄 수 있다
									느리게 느낄 수 있다																	페이지 전환시에도 화면이 깜빡이거나
																																		다시 렌더링 되지 않는다

	라우팅						각 링크를 클릭할 때마다 서버로부터										클라이언트 측 라우팅을 사용하여 url을
										새로운 페이지를 요청하고 받아와야한다									기반으로 사용자가 보는 내용을 관리한다	
																																			url의 일부분을 변경해서 새로운 페이지처럼
																																			보이는 컨텐츠를 로드할 수 있다

	검색엔진					서버측에서 전체 페이지의 컨텐츠를											초기 로드시에는 html에 동적으로 컨텐츠를
									렌더링하므로 검색 엔틴지 컨텐츠를											렌더링하므로 일반적으로 검색엔진은 초기에
										쉽게 색인화 할 수 있다															컨텐츠를 색인화 시키지 못할 수 있다
									네트워크 트래픽	각 페이지를 요청할 때마다 서버로부터		초기 로드시 모든 리소스를 한번에 다운로드
									새로운 HTML을 다운로드 해야하므로											하므로 초기 로딩속도는 느릴 수 있지만 
									전체적으로 봤을 때 더 많은 네트워크											이후에는 필요한 데이터만 요청하고 업데이트
									트래픽이 발생할 수 있다																되므로 네트워크 트래픽이 줄어든다

3. Vue.js의 장점
	직관적이고 배우기 쉽다
	재사용을 통한 어플리케이션 개발기간 단축, 양질의 코드를 생산할 수 있다
	Angular -> React -> Vue.js 순서로 개발 되었기 때문에 
	Angular의 장점(데이터 바인딩)과 React의 장점(가상돔)을 모두 가지고 있다

+) Angular의 데이터 바인딩(Two-Way 데이터 바인딩)
	데이터와 웹 화면의 요소(HTML DOM)가 서로 양방향으로 연결되어 있어서
	어느 한쪽에서 변경이 일어나면 연결되어있는 다른쪽에 자동으로 반영되는 것을 의미한다
+) React의 DOM
	DOM의 문제 DOM 트리구조를 모두 갱신하는 비효율성으로 인해 치명적인 성능저하
	극복 -> Virtual DOM(가상돔) 개념을 제공한다
=> Vue.js는 Angular와 React의 장점을 모두 수용해서 개발된 프레임워크

4. Vue.js 특징
1) MVVM 패턴 사용
	Model-View-ViewModel을 의미한다
	어플리케이션 로직과 UI의 분리를 위해 설계된 패턴이다
	ViewModel은 Model의 데이터 변경에 대한 알림을 받고 바인딩 기법을 통해 미리 정해진 템플릿 규칙에 따라 View를
	다시 그려낸다
	
	View : HTML, CSS로 작성
	ViewModel : 실제 논리 및 데이터 흐름을 담당한다

2) 컴포넌트(Component)
	작은 단위부터 특정 기능을 처리하는 더 큰 단위까지 화면(View)를 이루고있는 작은 단위의 View 중에 다른 화면에서도
	사용되는 View가 있다
	단위의 View를 재사용할 수 있는 구조로 개발하는 것을 의미한다

5. Vue 개발도구
1) 프론트엔드 개발도구
	Visual Studio Code : Microsoft에서 제공하는 무료 텍스트 에디터
	Sublime Text : 가볍고 빠른 성틍을 나타내는 텍스트 에디터
	Atom : GibHub에서 개발한 무료 텍스트 에디터

2) Vue를 설치하기 전에
	Visual Studio Code
	Node.js => 최신 버전 설치

3) 패키지 관리 도구
	npm : Node.js 공식 패키지 관리도구, 대부분의 라이브러리와 프레임워크를 지원한다
	Yarn : Facebook에서 개발한 패키지 관리도구, npm 보다 더 빠르고 안정적이다

vs code의 터미널(ctrl + `)
	> npm install --global @vue/cli
	설치 되면 성공
	설치가 제대로 안되면 yarn 설치

powershell 관리자 권한 실행
	> get-help Set-ExecutionPolicy => Y엔터
	> Set-ExecutionPolicy RemoteSigned => Y엔터(따로 나오는 것 없음)

vs code 터미널
	> npm install --global yarn
	> yarn global add @vue/cli
		[4/4] 완료되어야한다

4) vs code 확장 프로그램
	vue - Official(Vue 공식 확장 프로그램)

5) 크롬 브라우저 확장 프로그램(Vue 3 지원 다운로드)
	Vue.js devtools

6. ES6
	ES6(ECMAScript 6) ECMAScript 6번째 버전이라는 뜻이다
	ECMAScript는 ECMA-262 기술규격에 정의된 표준화된 스크립트 프로그래밍 언어를 의미한다

	ES6버전과 이전 버전의 변환기능을 제공하는 것을 트레스파일러(Transpiler)
	babel, tsc(typescript 트랜스파일러) 대표적이다

1) 도구
	Babel REPL 브라우저 기반의 도구
	ES6 코드를 작성하면 즉시 ES5 코드로 변환을 시도하며 에러메시지도 바로 보여준다

2) npm 패키지와 package.json 파일
	npm install, yarn add 명령어는 Node.js 패키지를 설치할 수 있는 명령어
	npm install 패키지명1, 패키지명2
		로컬모드로 설치, 현재 디렉터리의 node_modules 디렉터리에 패키지를 설치하는 것
	npm install -g 패키지명
		-g 옵션은 패키지를 전역(global)에 설치, 현재 내 컴퓨터 내의 모든 프로젝트에서 이용가능함
	npm install --save 패키지명1, 패키지명2
		--save 옵션은 현재 프로젝트 package.json에 개발 의존성으로 기록
	npm install --save-dev 패키지명1, 패키지명2
		--save-dev 옵션은 현재 프로젝트 package.json에 개발 의존성으로 기록
		운영버전으로 빌드된 이후에는 사용되지 않는다

3) 자주 사용하는 npm 명령어
	npm init : 프로젝트 초기화
	npm install : package.json 패키지 설치
	npm install --save : 패키지를 프로젝트 의존성으로 추가
	npm install --save-dev : 패키지를 프로젝트 개발 의존성으로 추가
	npm install --global(또는-g) : 패키지를 전역수준으로 추가
	npm update --save : 프로젝트 패키지 업데이트
	npm run 스크립트 명 : package.json의 스크립트 명령 실행
	npm uninstall --save : 패키지 삭제
	npm cache clean : 캐시 삭제

4) Babel 트랜스파일러 사용하기
	추가설정이 필요하다
	설정 파일 형식은 .babelrc 파일, babel.config.json파일

7. 자바스크립트 총 복습
1) let과 const
	ES6가 등장하기 전에는 변수 선언시에 var 키워드를 사용함
	호이스팅
		실행 컨텍스트가 만들어진 후에 var키워드가 부여된 변수를 미리 생성하는 것
		호이스팅 단계에서는 js코드를 파싱하고 내부에 var키워드가 지정된 코드를 찾아서 미리 메모리에 할당한다
	특징1) 함수단위로 호이스팅한다
	특징2) 호이스팅 단계에서 이미 변수가 생성되어있다면 변수를 생성하지 않고 건너뛴다
		즉, 오류를 일으키지 않는다(변수의 중복선언을 허용한다)
	=> 이 문제를 해결하기 위해 let 키워드를 지원한다

- let
	블록수준의 유효범위를 지원한다
	변수의 중복선언을 하지 않고 호이스팅도 하지 않는다
	let 키워드 변수가 중복되면 오류가 발생한다

- const
	선언될 때 값이 할당되면 변경할 수 없는 상수를 만들 때 사용한다
	ES6로 개발시 const가 자주 사용하는데 객체를 상수로 선언했을 때는 속성값 변경할 수 있다

=> 함수나 객체를 만든 후에 메모리 주소가 바뀌지 않도록 하고 싶다면 const를 사용하면 된다
	const 객체를 생성한 경우 객체 내부의 속성이 변경될 수 있지만 새로운 객체를 생성하여 할당하는 것은 허용하지 않는다

2) 기본 파라미터, 가변 파라미터
기본파라미터 : ES6에서 기본 파라미터를 이용해 함수의 파라미터의 기본값을 지정할 수 있다
가변파라미터 : 여러개의 파라미터 값을 배열로 받을 수 있다
	전달하는 파라미터의 개수는 가변적으로 적용가능하다

function addInfo(name, phone, home = "없음", email="없음"){
	let str = `name : ${name}, phone : ${phone}, home : ${home}, email : ${email}`;
	console.log(str);
}

addInfo("짱구", "010-1234-5678");
addInfo("짱구", "010-1234-5678", "서울시 강남구", "korea@koreait.com");

function food(name, ...favoriteFoods){
	console.log(name + "이 좋아하는 음식은 : " + favoriteFoods);
}

food("짱구", "초코비");
food("짱구", "초코비", "초코우유");

3) 구조 분해 할당(Dstructuring Assignment)
	ES6에서는 배열, 객체의 값들을 추출하여 한번에 여러 변수에 할당 할 수 있는 기능
	함수의 파라미터에서 사용 가능하다

4) 화살표 함수(Arrow Function)
	ES6 화살표 함수는 기존 함수 표현식에 비해 간결하다
	함수를 정의하는 영역의 this를 그대로 전달받을 수 있다

5) 자바스크립트에서의 this
	메소드, 함수가 호출될 때마다 현재 호출중인 메소드를 보유한 객체가 this로 연결된다
	현재 호출중인 메소드를 보유한 객체가 없다면 전역객체(Global Object, 브라우저 환경에서는 Window 객체)가 연결된다
	
	자바스크립트 함수, 메소드는 어떤 객체의 메소드 형태로 호출되느냐가 this를 결정하는 기본적인 규칙이다
	bind() : 함수의 this값을 특정 객체로 고정시키는 역할을 한다
		지정할 객체를 this로 미리 연결한(binding) 새로운 함수를 리턴한다
	apply(), call() : 함수를 호출하면서 특정 객체를 this로 지정할 때 사용한다
		apply() 메소드는 인수를 배열 형태로 전달한다
		call() 메소드는 인수를 각각 직접 전달한다

6) 화살표 함수에서의 this
	일반함수와 화살표 함수에서의 this 차이는 함수가 중첩될 때 확인가능하다
	() => {}
	function 함수명(){}

















