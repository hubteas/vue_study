day68
웹개발4 15일차(vue.js 4일차)
ESLint, Prettier -> OptionAPI, CompositionAPI -> CompositionAPI -> Setup hook -> 템플릿 문법 -> 반응형

1. ESLint, Prettier
1)  프로젝트 구조

├── node_modules
│      └── ...
├── public
│   └── favicon.ico
├── src
│   ├── App.vue
│   ├── assets
│   │   ├── base.css
│   │   └── logo.svg
│   ├── components
│   │   ├── HelloWorld.vue
│   │   ├── TheWelcome.vue
│   │   ├── WelcomeItem.vue
│   │   └── icons
│   │       ├── IconCommunity.vue
│   │       ├── IconDocumentation.vue
│   │       ├── IconEcosystem.vue
│   │       ├── IconSupport.vue
│   │       └── IconTooling.vue
│   └── main.js
├── index.html
├── package-lock.json
├── package.json
├── README.md
└── vite.config.js

2) ESLint, Prettier
  EsTlint : 코드 검사기, 코드에 에러가 있는지 검사해주는 도구
  Prettier : 코드 포매터, 코드를 일관성있고 예쁘게 정렬해주는 도구

3) .eslintrc.cjs
  'plugin:vue/vue3-essential',
  // https://eslint.vuejs.org/rules/#priority-a-essential-error-prevention-for-vue-js-3-x
  'eslint:recommended',
  // 표시된 항목을 자동으로 검사해주는 옵션, https://eslint.org/docs/latest/rules/
  '@vue/eslint-config-prettier/skip-formatting'
  // 불필요한 규칙이나 eslint와 prettier 가 충돌할 수 있는 규칙을 종료하는 충돌방지용 패키지

4) VSCode 에서 ESLint  기반으로 Format On Save 설정
  settings.json
  eslint.validate : 검사해야하는 언어를 ESLint 확장에 알려준다
  editor.codeActionsOnSave : VS Code의 저장 이벤트에 대한 훅
  source.fixAll.eslint : 저장중인 파일의 문제를 수정하라는 메세지 표시

2. Options API vs Composition API
  1) OptionsAPI
    Vue2에서 사용하던 방식으로 컴포넌트의 로직을 data, methods, computed, watch 등의 여러 속성을 분리하여 정의한다
    직관적으로 쉽게 배울 수 있다는 장점이 있다

    예제코드
        <template>
      <div>
        <button @click="increment">카운트 : {{ counter }}</button>
      </div>
    </template>

    <script>
    export default{
      data(){
        return{
          counter:0,
        };
      },
      methods:{
        increment(){
          this.counter++;
        },
      },
      mounted(){
        console.log("마운트 되었습니다");
      },
    };
    </script>


    <style scoped>

    </style>

  2) CompositionAPI
    Vue3에서 도입된 새로운 방식으로 로직의 재사용과 유연성을 위해 설계되었다
    컴포넌트의 상태와 로직을 함수 형태로 정의하고, 가져와 사용하는 방식이다
    대규모 어플리케이션에서 코드의 가독성과 유지보수성을 개선할 수 있다는 장점이 있다
    옵션(data, methods, ..) 를 선언하는 대신 함수(ref, onMounted, ..)를 사용하여 Vue 컴포넌트를 작성할 수 있는 API 세트를 의미한다
    https://vuejs.org/api/
    - 반응형 API
    - 라이프 사이클 훅(Lifecycle Hooks)
    - 종속성 주입(Dependency Injection)

      +) 전체흐름
    인스턴스 생성 : beforeCreate
    화면에 반응성 주입 : created
    컴파일된 템플릿이 있다면 템플릿 컴파일
    초기렌더링 : DOM 노트 생성 및 삽입 -> beforeMount -> mounted
    데이터 변경 -> beforeUpdate -> DOM 업데이트 -> updated
    인스턴스 소멸 -> beforeDestroy -> Destroyed

    예제코드
      <template>
        <div>
          <button @click="increment">카운트 : {{ counter }}</button>
        </div>
      </template>

      <script>
      import{ onMounted, ref} from 'vue';

      export default{
        setup(){
          const counter = ref(0);

          const increment = ()=> counter.value++;

          onMounted(()=>{
            console.log("마운트되었습니다");
          });
          return{
            counter,
            increment,
          };
        },
      }

      </script>

3) OptionsAPI
  OptionsAPI 는 Vue 의 필수적인 부분이며, CompositionAPI 의 장점은 대규모 프로젝트에서만 있기 때문에 OptionAPI 는 
  복잡도가 낮거나 중간규모의 프로젝트에서 계속 활발히 사용되고 있다

3. 라이프 사이클 훅(Lifecycle Hooks)
  Vue.js 의 라이프 사이클 훅은 컴포넌트가 생성되고 DOM에 마운트되고, 업데이트, 소멸되는 과정에서
  특정 시점에 호출되는 메소드들을 의미한다
  개발자는 컴포넌트의 상태와 동작을 제어할 수 있다

1) setup() 함수
  CompositionAPI 핵심, 컴포넌트의 초기상태를 설정하고 반응형 데이터를 정의하고 로직들을 캡슐화할 수 있는 함수
  컴포넌트가 생성될 때 가장 먼저 실행되고 Vue2에서 사용하던 라이프 사이클 훅과 비슷한 역할을 수행한다

  - 반응형 데이터 정의 : ref, reactive 를 사용하여 반응형 상태 정의
  - 컴포넌트의 초기 설정 : 컴포넌트에서 사용할 상태 (state), 메소드(methods), 속성(computed properties)등
  - 라이프사이클 훅 사용 : setup(내부에서 CompositionAPI 전용 라이프 사이클 훅을 사용 가능

2) beforeCreate
  Vue 인스턴스가 생성되기 전 호출된다
  데이터가 반응형으로 설정되지 않았고 컴포넌트의 데이터와 메소드에 접근할 수 없다

3) created 
  Vue 인스턴스가 생성되고 나서 호출된다
  데이터가 반응형으로 설정되고 컴포넌트의 데이터, 메소드, 컴포넌트 내의 다른 모든 요소에 접근할 수 있다

4) beforeMount
  컴포넌트가 DOM에 마운트되기 전에 호출된다
  DOM에 렌더링되지 않은 상태이다

5) mounted
  컴포넌트가 DOM에 마운트 된 후에 호출된다
  컴포넌트의 DOM요소에 접근할 수 있으며 초기화 작업이 배치된다

6) beforeUpdate
  컴포넌트의 반응형 데이터가 변경되어 DOM이 업데이트 되기 전에 호출된다
  업데이트가 발생하기 전에 작업처리가 가능하다

7) updated
  컴포넌트의 DOM이 업데이트 된 후에 호출된다.
  데이터가 변경되어 새로운 상태로 렌더링 완료된 후를 의미한다

8) beforeDestroy
  Vue 인스턴스가 파괴되기 전에 호출된다
  타이머 또는 이벤트 리스너를 정리할 수 있다

9) Destroyed
  Vue 인스턴스가 소멸된 후에 호출된다
  모든 디렉티브와 데이터 바인딩이 해체되고 컴포넌트의 모든 하위 인스턴스가 소멸된다

4. 템플릿 문법(Template Syntax)
  Vue는 템플릿 문법을 사용하여 렌더링된 DOM을 컴포넌트의 인스턴스 데이터에 선언적으로 바인딩 할 수 있다

1) 텍스트 보간법 {{}}  (이중 중괄호, 콧수염 괄호)
  데이터 바인딩의 가장 기본형태 {{data}}
  컴포넌트 인스턴스의 message값으로 대체된다
  message 속성이 변경될 떄마다 갱신된다

  v-once 디렉티브를 사용하여 데이터가 변경되어도 갱신되지 않는 일회성 보간을 수행할 수 있다
  ex) <p v-once> 이름 : {{name}}</p>

2) 속성 바인딩(v-bind)
  이중 중괄호는 html 속성에 사용할 수 없다
  v-bind 디렉티브로 사용할 수 있다
  ex) <div v-bind:title="onMouse"> 마우스를 올려보세요</div>
      <input type="text v-bindLdisabled="idInputDisabled"/>


  ex) 속성 바인딩 단축 표현
      <div :title="onMouse"> 마우스를 올려보세요</div>
      <input type="text :disabled="idInputDisabled"/>
      
  ex) 다중 바인딩(객체의 여러 속성을 한번에 바인딩할 수 있다)
      const attrs = {
        id : 'user-id,
        type : 'text',
        placeholder : '아이디를 입력하세요',
      }

      <input v-bind="attrs"/>


5. 디렉티브(Directive)
   vue.js에서 디렉티브는 HTML 요소의 동작을 확장하거나 DOM을 조작할 수 있는 특별한 속성이다
   v-로 시작하며 특정 동작을 수행하는데 사용한다

1) v-bind
   HTML 속성에 Vue의 데이터를 바인딩할 때 사용한다
   축약형으로는 : 으로 사용할 수 있다

2) v-on
   DOM 이벤트를 Vue 메소드에 연결할 때 사용한다
   축약형으로 @으로 사용할 수 있다

3) v-if, v-else-if, v-else
   조건에 따라 DOM요소를 렌더링하거나 제거할 수 있다

4) v-show
   조건에 따라 요소의 display 속성을 토글한다
   display:none으로 숨길수는 있지만 DOM에서 완전히 제거되지는 않는다

5) v-for
   배열이나 객체의 아이템 목록을 반복적으로 렌더링할 때 사용한다

6) v-model
   양방향 데이터 바인딩을 제공한다

7) v-html
   데이터의 HTML 문자열을 실제 HTML로 렌더링한다
   XSS(사이트 간 스크립팅)공격에 취약하다

8) v-text
   요소의 textContent를 설정한다
   텍스트 내용을 설정하는데 사용되며 중괄호와 유사한다

9) v-once
   요소나 컴포넌트의 초기 렌더링만 수행하고 이후 업데이트는 무시된다
