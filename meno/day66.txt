day66
웹개발4 13일차(vue.js 2일차)
자바스크립트 총 복습 -> Vue -> 프로젝트 구성

[자바스크립트 총 복습]
1. 기본 내용
1) 자바스크립트 사용
   <script>자바스크립트<script>
      script 태그 안에 javascript 코드 사용
   <script src="파일경로"></script>
   <script src="파일경로" /> 
      script 태그 안에 src 속성에 자바스크립트 파일 경로 삽입

2) 콘솔에 출력
   console.log()

3) 알림/경고창
   alert()      단순한 정보를 사용자에게 표시하기 위해 사용된다
   prompt()   사용자에게 입력받을 수 있는 칸을 제공하는 대화상자
   confirm()   사용자에게 예 or 아니오 선택지를 제공하는 대화상자

4) 주석
   //   한줄주석
   /* */    여러줄 주석

5) 숫자표현, 문자표현, 세미콜론
   숫자 : 1234
   문자 : 'hello' "hello" `hello`
   세미콜론(;) : 명령문의 끝

6) 변수
   다양한 값을 저장할 수 있는 저장공간
   키워드 변수명 = 값;
   값이 변수에 저장될 때 타입이 정해진다
   var a = 값;
   let b = 값;

   var ES6이전에 만들어진 키워드로 호이스팅이 가능하지만
   let 호이스팅이 불가능하다

7) 함수(메소드)
   코드를 편하게 재사용하기 위해서 그룹화 한 것을 의미한다
   함수와 메소드의 차이는 객체 안에서 만들어진 함수를 메소드라고한다
   함수의 종류 : 일반함수, 익명함수, 화살표함수, 콜백함수, 재귀함수 등..

8) 객체
   프로퍼티(프로퍼티 키와 프로퍼티 값)로 구성
   변수와 함수를 같이 가지고 있다

9) 이벤트
   HTML 요소에서 발생한 사건을 의미한다


   
2. 배열
   자바스크립트의 배열은 특수한 객체
   배열안에 있는 데이터에는 순서가 존재한다(인덱스 index)
   다양한 메소드를 가지고 있다

1) 배열의 생성
   배열 리터럴 표기법(array literal syntax)
   const 배열명 = ['사과', '복숭아',..];

   배열 생성자 표기법(array constructor syntax)
   const 배열명 = new Array('사과', '바나나', '체리', ...);

2) 배열의 접근
   대괄호([])를 통해 배열 안의 값에 접근이 가능하다
   인덱스는 0부터 시작한다

   const fruits = ['사과', '복숭아',..];
   console.log(fruits[0]);   //사과
   console.log(fruits[1]);   //복숭아
   console.log(fruits[2]);      

3) 자주사용하는 배열 프로퍼티, 메소드
   .length : 배열 길이
   .push() : 배열 끝에 항목 추가
   .forEach() : 배열의 항목 순회하면서 처리(반복문)
   .pop() : 배열 끝에 항목 제거
   .shift() : 배열 앞에 항목 제거
   .unshift() : 배열 앞에 항목 추가
   .indexOf() : 배열 안 항목의 인덱스(index)찾기
   .splice() : 인덱스 위치에 있는 항목 제거

4) 구조 분해 할당(Distructuring assignment)
   배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 자바스크립트의 표현식
   day65.js 파일 참고

5) Spread Syntax(전개구문)
   배열을 할당할 때 참조값을 할당하는 것이 아닌 배열 안의 항목을 펼치는 방식으로 할당할 수 있다
   ...표기법을 사용한다
   
   let arr1 = [1, "이", "three", 4.0];
   let arr2 = [...arr1, 5, '육'];
   
   함수의 매개변수에서 사용하게 되면 가변 매개변수로 사용할 수 있다
   function numbers(...num){
      console.log(num);
   }

6) 배열 복사하기
   배열은 객체기 때문에 참조값을 가지고 있고 이 값을 다른 배열에 할당하면 결국 같은 참조값을 가지므로
   복사한 배열과 기존 배열의 값이 같이 변경된다


3. 데이터 타입(값의 종류)
  기본타입과 객체타입으로 구분된다

1) 기본타입(Primitive Type)
  자바스크립트에서 객체가 아닌 것들을 의미하며 더이상 작은 단위로 나뉘어지지 않는 값이다
  기본타입의 값을 그 자체로 변수에 저장된다
  객체, 배열, 함수와 달리 변형 할 수 없다

  숫자(number), 문자열(string), 논리형(boolean), null, undifined, 심볼(symbol)

  자바스크립트의 내장된 객체
  Array, Date, Math, Object, 이외의 모든 것...

  (1) 객체 특징
    자바스크립트의 객체는 {이름(key) : 값(value)}의 형태로 프로퍼티(property)를 저장하는 컨테이너이다
    자바스크림트 기본타입은 하나의 값만 가질 수 있는데 객체 타입은 여러개의 프로퍼티를 포함할 수 있다
    객체의 프로퍼티는 값으로 기본타입, 또 다른 객체, 함수를 가질 수 있으며
    객체의 프로퍼티가 함수를 가질 때 메소드라고 부른다
    참조타입(reference type)

3) typeof
  피 연산자의 데이터 타입을 문자열로 반환한다

3. 데이터 타입(값의 종류)
   기본타입과 객체타입으로 구분된다

1) 기본타입(Primitive Type)
   자바스크립트에서 객체가 아닌것들을 의미하며 더이상 작은 단위로 나뉘어지지 않는 값이다
   기본타입의 값을 그 자체로 변수에 저장된다
   객체, 배열, 함수와 달리 변형 할 수 없다

   숫자(number), 문자열(string), 논리형(boolean), null, undefiend, 심볼(symbol)

2) 객체 타입(Object Type)
   자바스크립트에서 기본타입을 제외한 모든 값은 객체타입이다

   자바스크립트의 내장된 객체
   Array, Date, Math, Object, 이외의 모든 것..

객체 특징
   자바스크립트의 객체는 {이름(key) : 값(value)}의 형태로 프로퍼티(Property)를 저장하는 컨테이너이다
   자바스크립트 기본타입은 하나의 값만 가질 수 있는데 객체 타입은 여러개의 프로퍼티들을 포함할 수 있다
   객체의 프로퍼티는 값으로 기본타입, 또 다른 객체, 함수를 가질 수 있으며 
   객체의 프로퍼티가 함수를 가질 때 메소드라고 부른다
   참조타입(Reference Type)

3) typeof
   피연산자의 데이터 타입을 문자열로 반환한다


4) 숫자
   모든 숫자를 number 타입으로 사용한다
   
- 숫자의 특별한 값
   양수를 0으로 나눈경우 Infinity
   음수를 0으로 나눈경우 -Infinity
   숫자가 아닌 값을 나눈 경우 NaN

   const number = 2; //2는 숫자형 리터럴

5) 문자열
   string 타입
   '', "", ``(ES6에서 도입된 문법)

- 템플릿 문자열
   ES6 이전에는 + 기호를 통해서 값과 문자열을 연결했다면 ES6에서는 백틱(``)을 이용하여 편리하게 문자열과 값을
   연결해서 사용할 수 있다

- 이스케이프 표현
   \n   줄바꿈
   \r   캐리지리턴
   \\   백슬래쉬
   \"   큰따옴표
   \'   작은따옴표
   \t   탭키

6) 불리언
   true, false
   조건식의 결과로 불리언 타입을 사용한다

7) 심볼
   ES6에서 도입한 새로운 데이터 타입
   항상 유일한 값이다
   다른 식별자와 혼동해서는 안되는 고유한 식별자가 필요시 심볼을 사용한다

8) null과 undefined
   특별한 타입
   둘 다 값이 비어있는 상태이다
   null : 값이 없음을 나타내는 값(값이 빈 상태를 의도적으로 표현)
   undefined : 값을 할당하지 않은 상태

4. 제어문
   프로그램의 흐름을 제어할 수 있도록 도와주는 실행문을 의미한다
   제어문을 활용하게 되면 목적에 맞게 필요한 조작을 할 수 있다

1) 조건문 : 조건에 따라서 다른 문장을 실행하는 문
   if문 : 관계연산자를 이용하여 조건을 비교
      if (조건이 참인 경우), else (조건이 거짓인 경우), else if (다중조건인 경우)

   +) 자바스크립트의 거짓과 같은 값
   false, 0, -0, 0n, "", null, undefined, NaN

   switch문 : 하나의 변수에 여러개의 값이 들어갈 수 있다
      표현식의 값을 case 절에서 일치할 경우에 해당 case에 있는 명령문을 수행
      default 모든 case절과 일치하지 않을 때 수행

2) 반복문   : 동일한 코드를 여러번 실행시키는 문장
   for : 반복횟수, 범위를 알 때
      for(let 초기화, 조건식, 증감식)
      for...in    : 객체(Object)에 있는 키 항목들을 반복적으로 반환한다(ES6)
      for...of   : 반복 가능한 배열과 객체에서 반복해서 값을 하나씩 반환한다(ES6)

   while : 조건을 알 때
   do~while : 최소 한번은 무조건 실행해야 할 때(실행 후 조건 비교)
 
3) 기타제어문 : 멈추거나 빠져나가거나 건너뛰고 계속 진행하거나 되돌아가거나 하는 실행을 해야할 때 사용
   break : 반복문 즉시 탈출, switch문의 case 마다 switch문을 종료할 수 있도록 사용
   continue : 해당 블록을 건너 뛰고 다음 반복으로 실행


5. 연산자
   어떠한 연산을 수행하는 기호

1) 문자열 병합
   문자열은 + 연산자를 사용하여 병합할 수 있다
   console.log("hello" + " world"); //hello world
   console.log('3' + 3); // 33
   console.log(5 + 2 + '1') //71
   console.log('5' + 2 + 1) //521

2) 산술 연산자
   +   덧셈
   -   뺄셈
   *   곱셈
   /   나눗셈
   %   나머지

3) 증감연산자
   x++   후위 증가 : 현재 명령문 수행 후 x에 1 증가   
   ++x   전위 증가 : x에 1만큼 증가시킨 후 현재 명령문 수행
   x--   후위 감소 : 현재 명령문 수행 후 x에 1 감소
   --x   전위 감소 : x에 1만큼 감소시킨 후 현재 명령문 수행

4) 비교연산자
   피연산자를 서로 비교하고 비교 결과가 참인지에 따라 논리값을 반환
   a > b
   a >= b
   a < b
   a <= b
   a == b
   a === b   : 데이터 타입까지 비교, 값과 타입이 같다면 true
   a != b
   a !== b : 데이터 타입까지 비교, 값과 타입이 같지 않다면 true

5) 논리연산자
   불리언(boolean) 값만 다룰 수 있으며 true, false만 존재한다
   자바스크립트의 논리연산자는 불리언이 아닌 값도 다룰 수 있고 불리언이 아닌 값도 반환한다
   
   x && y    (and)    피연산자가 모두 true일 때만 true, 그 외에는 false
   x || y  (or)   피연산자 중 하나라도 true이면 true, 둘 다 false일 때만 false
   !x    (not)   피연산자를 반대로 바꾼다

6) 삼항연산자
   조건식 ? 값1 : 값2
   조건식이 true면 값1을 반환하고 false면 값2를 반환한다


6. 함수
1) 함수 생성
- 함수 선언식
	function 함수명(){ ... }

- 함수 표현식
	자바스크립트에서 함수는 객체다
	let 식별자 = function(){ ... }

=> 두가지의 차이는 함수 선언식은 호이스팅의 영향을 받지만 함수표현식은 호이스팅의 영향을 받지 않는다

- 매개변수(파라미터)
	소괄호()안에 파라미터(또는 매개변수)를 선언하여 함수 호출 시 값을 전달할 수 있다

- 반환값
	return 키워드를 사용하여 값을 반환할 수 있다

2) 함수 스코프
- 전역 스코프 : 최상단에 선언된 변수, 함수
- 블록 스코프 : 블록 단위로 선언된 변수, 함수

3) 익명함수
	이름이 없는 함수, 값으로 사용될 수 있다

4) 즉시 실행 함수
	()를 사용하여 즉시 실행하는 함수를 만들 수 있다

	let result = (function(name) { 
		console.log("즉시실행함수");
		console.log(name + "입니다");
	})("김영선");

5) 화살표 함수(Arrow Function)
	ES6에서 추가
	function 예약어 생략 가능
	매개변수가 한개라면 () 생략 가능
	함수 바디가 표현식 한개라면 {}와 return 생략 가능

	() => {}
	ex1) 
	const f1 = function() => { return "hello";}
	const f1 = () => "hello";
	
	ex2)
	const f2 = function(name) => {return `Hello ${name}님`;}
	const f2 = name => `Hello ${name}님`;

	ex3) 
	const f3 = function(num1, num2) => { retrun num1 + num2; }
	const f3 = (num1, num2) => num1 + num2;

	ex4)
	const f4 = function(num1, num2) => { console.log(num1); console.log(num2); 
				retrun num1 + num2; }
	const f4 = (num1, num2) => { console.log(num1); console.log(num2); 
				retrun num1 + num2; }

6) 콜백함수
	다시 호출 되는 함수를 의미한다
	
7. DOM(Document Object Model)
	웹 문서를 제어하기 위해 웹 문서를 객체화 한 것을 의미한다
	객체는 값을 나타내는 프로퍼티와 메소드를 갖고 있따
	HTML의 모든 요소는 DOM 트리로 구성된다

1) HTMLCollection, NodeList
	https://developer.mozilla.org/ko/docs/Web/API/HTMLCollection
	https://developer.mozilla.org/ko/docs/Web/API/NodeList
	
2) 문서 객체 모델
	https://developer.mozilla.org/ko/docs/Web/API/Document_Object_Model






